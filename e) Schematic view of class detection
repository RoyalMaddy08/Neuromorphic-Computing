import numpy as np
import matplotlib.pyplot as plt

# Define small realistic values for the inputs
# Let's assume we have a 2D feature space for simplicity
x = np.array([1e-6, 2e-6])
y = np.array([3e-6, 4e-6])

# Calculate the squared Euclidean distance
squared_distance = np.sum((x - y) ** 2)

# Assume a proportionality constant for the output voltage
# This constant will depend on the specifics of the operational amplifier circuit
# For simplicity, let's use a proportionality constant of 1e6 (it can be adjusted based on LTSpice simulation)
proportionality_constant = 1e6  # Chosen to amplify the small squared distance to a reasonable voltage level
Vout = proportionality_constant * squared_distance

# Let's assume the resistance in the circuit is 1k ohms
resistance = 1e3  # in ohms

# Calculate the total current
total_current = Vout / resistance

# Print the results
print(f"Squared Euclidean Distance: {squared_distance:.2e}")
print(f"Output Voltage (Vout): {Vout:.2e} V")
print(f"Total Current: {total_current:.2e} A")
print(f"Proportionality Constant: {proportionality_constant:.2e} V/(units of distance^2)")

# Generate data for plotting the relationship
squared_distances = np.linspace(0, 1.5 * squared_distance, 100)
Vouts = proportionality_constant * squared_distances
total_currents = Vouts / resistance

# Plot the relationship
plt.figure(figsize=(10, 6))
plt.plot(squared_distances, total_currents, label='Total Current vs Squared Euclidean Distance', color='blue')
plt.scatter([squared_distance], [total_current], color='red', label='Computed Value')
plt.xlabel('Squared Euclidean Distance')
plt.ylabel('Total Current (A)')
plt.title('Relationship between Total Current and Squared Euclidean Distance')
plt.legend()
plt.grid(True)
plt.show()
