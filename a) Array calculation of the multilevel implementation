import numpy as np
import matplotlib.pyplot as plt

# Number of features (example with n=3)
n = 3

# Define the constant voltage V_u
V_u = 5  # constant voltage

# Define the feature values for input x and training example x_i
# For simplicity, using example values
a_x = np.array([2, 3, 1])
a_xi = np.array([4, 1, 2])

# Calculate voltages and conductances for the crossbar array
V = np.zeros((n, n))
G = np.zeros((n, n))

for j in range(n):
    V[j] = [V_u * a_x[j]**2, -V_u * a_x[j], -V_u * a_xi[j], V_u * a_xi[j]**2]
    G[j] = [1 * a_x[j]**2, 1 * a_x[j], 1 * a_xi[j], 1 * a_xi[j]**2]

# Calculate the current (I) as element-wise product of V and G
I = V * G

# Sum the currents for each feature to get the squared distance components
I_sum = np.sum(I, axis=1)

# Sum the squared distance components to get the total squared Euclidean distance
D = np.sum(I_sum)

print(f"Squared Euclidean Distance: {D}")

# Plotting the squared distance components
plt.figure(figsize=(8, 6))
plt.bar(range(len(I_sum)), I_sum, color='blue')
plt.xlabel('Feature Index')
plt.ylabel('Squared Distance Component')
plt.title('Squared Euclidean Distance Components')
plt.xticks(range(len(I_sum)), [f'Feature {i+1}' for i in range(len(I_sum))])
plt.grid(True)
plt.show()
